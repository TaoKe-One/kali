Nmap 是个端口扫描器，这意味着它可以向一些指定 IP 的 TCP 或 UDP 端口发送封包，并检查是否有响应。如果有的话，这意味着端口是打开的，因此，端口上运行着服务。

在第一个名中，使用 -sn  参数，我们让 Nmap 只检查是否服务器响应 ICMP 请求（或ping）。我们的服务器响应了，所以它是活动的。

![image-20201201212032994](/root/.config/Typora/typora-user-images/image-20201201212032994.png)

第二个命令是调用 Nmap 的最简方式，它只指定目标 IP。所做的事情是先 ping 服务器，如果它响应了，Nmap 会向 1000 个 TCP 端口列表发送探针，来观察哪个端口响应，之后报告响应端口的结果。

![image-20201201212103780](/root/.config/Typora/typora-user-images/image-20201201212103780.png)

第三个命令向第二个添加了如下两个任务：
-sV  请求每个被发现的开放端口的标识（头部或者自我识别），这是它用作版本的东西。
-O  告诉 Nmap，尝试猜测运行在目标上的操作系统。使用开放端口和版本收集的信息。

![image-20201201212145688](/root/.config/Typora/typora-user-images/image-20201201212145688.png)

检测防火墙是否存在也可以使用wafw00f 

WAF 检测的原理是通过发送特定请求到服务器，之后分析响应。例如，在 http-waf-detect  的例子中，它发送了一些基本的恶意封包，并对比响应，同时查找封包被阻拦、拒绝或检测到的标识。 http-waf-fingerprint  也一样，但是这个脚本也尝试拦截响应，并根据已知的不同 IDS 和 WAF 的模式对其分类。 wafw00f  也是这样。



### 查看源码

(view page Source)

根据源代码,我们可以发现此页面所使用的库或者外部文件,以及链接的去向.同时也会看到一些隐藏的字段.



​		网页的源代码在发现漏洞和分析应用对所提供输入的响应上非常有用。它也提供给我们关于应用内部如何工作，以及它是否使用了任何第三方库或框架的信息。
​		一些应用也包含使用 JS 或任何其它脚本语言编写的输入校验、编码和加密函数。由于这些代码在浏览器中执行，我们能够通过查看页面源代码来分析它，一旦我们看到了校验函数，我们就可以研究它并找到任何能够让我们绕过它或修改结果的安全缺陷。



Firebug 允许我们修改几乎每个页面在浏览器中显示的层面,所以,如果存在建立在客户端的控制逻辑,我们可以使用工具才操作它.

Firebug 不仅仅是个取消输入框的隐藏或修改值的工具，它也拥有一些其它的实用功能：
Console  标签页展示错误，警告以及一些在加载页面时生成的其它消息。
HTML  标签页是我们刚刚使用的页面，它以层次方式展示 HTML，所以允许我们修改它的内容。
第二章 侦查
CSS  标签页用于查看和修改页面使用的 CSS 风格。
Script  让我们能够看到完整的 HTML 源代码，设置会打断页面加载的断点，执行到它们时会打断加载，以及检查脚本运行时的变量值。
DOM  标签页向我们展示了DOM（文档对象模型）对象，它们的值，以及层次结构。
Net  展示了发送给服务器的请求和它的响应，它们的类型、尺寸、响应时间，和时间轴上的顺序。
Cookies  包含由服务器设置的 Cookie，以及它们的值和参数，就像它的名字那样。



